name: Deploy Related:Chat
on: workflow_dispatch

jobs:
  build_and_deploy_production_web_app:
    name: Build and deploy production web app
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ fromJSON(secrets.GCP_SA_KEY).project_id }}
    defaults:
      run:
        working-directory: web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Install Firebase CLI and retrieve web app config
        run: |
          npm i -g npm@7.19.1 firebase-tools@9.18.0 --silent
          firebase use ${{ env.PROJECT_ID }}
          firebase apps:sdkconfig web --json > /opt/web_config.json
          echo 'web_config<<EOF' >> $GITHUB_ENV
          echo $(cat /opt/web_config.json) >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Build
        run: npm ci && npm run build
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: --max-old-space-size=4096
          REACT_APP_API_URL: https://europe-west1-${{ env.PROJECT_ID }}.cloudfunctions.net/api
          REACT_APP_FIREBASE_API_KEY: ${{ fromJSON(env.web_config).result.sdkConfig.apiKey }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ fromJSON(env.web_config).result.sdkConfig.authDomain }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ fromJSON(env.web_config).result.sdkConfig.projectId }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ fromJSON(env.web_config).result.sdkConfig.storageBucket }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ fromJSON(env.web_config).result.sdkConfig.messagingSenderId }}
          REACT_APP_FIREBASE_APP_ID: ${{ fromJSON(env.web_config).result.sdkConfig.appId }}
          # REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ fromJSON(env.web_config).result.sdkConfig.measurementId }}

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.GCP_SA_KEY }}
          projectId: ${{ env.PROJECT_ID }}
          channelId: live
          entryPoint: ./web
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels

  build_and_deploy_production_backend:
    name: Build and deploy production backend
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ fromJSON(secrets.GCP_SA_KEY).project_id }}
    defaults:
      run:
        working-directory: cloud
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('cloud/functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Install Firebase CLI and retrieve web app config
        run: |
          npm i -g npm@7.19.1 firebase-tools@9.18.0 --silent
          firebase use ${{ env.PROJECT_ID }}
          firebase apps:sdkconfig web --json > /opt/web_config.json
          echo 'web_config<<EOF' >> $GITHUB_ENV
          echo $(cat /opt/web_config.json) >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Install npm packages
        run: cd functions && npm install --production=false --silent && cd ..

      - name: Deploy to Firebase
        run: |
          firebase functions:config:set webapp.api_key="${{ fromJSON(env.web_config).result.sdkConfig.apiKey }}"
          firebase deploy --force
